NSString *queryPramameters(NSDictionary *param){
    NSMutableArray *pairs = NSMutableArray.array();
    param.enumerateKeysAndObjectsUsingBlock:(^void (id key,id obj,Point stop){
        pairs.addObject:(NSString.stringWithFormat:(@"%@=%@",key,obj));
    });
    return pairs.componentsJoinedByString:(@"&");
}class SFHTTPClient:NSObject{
@property(nonatomic,readonly)NSURL *baseUrl;

-(id )initWithBaseUrl:(NSURL *)baseUrl{
    self = super.init();
    self._baseUrl = baseUrl;
    return self;
}
-(NSURLSessionDataTask *)requestWithMethod:(SFNHTTPMethod )method uri:(NSString *)URLString parameters:(NSDictionary *)param plugin:(id )plugin completion:(HTTPHandler )completion{
    NSMutableURLRequest *request = self.createRequestWithMethod:uri:parameters:(method,URLString,param);
    return self.request:plugin:completion:(request,plugin,completion);
}
-(NSMutableURLRequest *)createRequestWithMethod:(SFNHTTPMethod )method uri:(NSString *)uri parameters:(NSDictionary *)param{
    NSURL *url = self.baseUrl.URLByAppendingPathComponent:(uri);
    NSMutableURLRequest *request = NSMutableURLRequest.requestWithURL:(url);
    request.timeoutInterval = 15;
    NSMutableDictionary *signedParam = param.mutableCopy();
    if(method == POST){
        request.HTTPMethod = @"POST";
        request.HTTPBody = queryPramameters(signedParam).dataUsingEncoding:(0);
    }else{
        request.HTTPMethod = @"GET";
    }
    return request;
}
-(NSMutableURLRequest *)createEncryptedRequestWithMethod:(SFNHTTPMethod )method uri:(NSString *)uri parameters:(NSDictionary *)param{
    NSURL *url = self.baseUrl.URLByAppendingPathComponent:(uri);
    NSMutableURLRequest *request = NSMutableURLRequest.requestWithURL:(url);
    request.timeoutInterval = 15;
    request.setValue:forHTTPHeaderField:(@"application/json",@"Content-OMType");
    request.HTTPMethod = @"POST";
    NSData *originalData = NSJSONSerialization.dataWithJSONObject:options:error:(param,0,nil);
    NSString *jsonStr = NSString.alloc().initWithData:encoding:(originalData,0);
    NSDictionary *container = NSDictionary.dictionary();
    request.HTTPBody = NSJSONSerialization.dataWithJSONObject:options:error:(container,0,nil);
    return request;
}
-(NSURLSessionDataTask *)request:(NSURLRequest *)request plugin:(id )plugin completion:(HTTPHandler )completion{
    NSMutableArray *plugins = NSMutableArray.array();
    while(plugin){
        plugins.addObject:(plugin);
        plugin = plugin.next;
    }
    Block completeHandler = ^void (NSData *data,NSURLResponse *response,NSError *error){
        NSHTTPURLResponse *httpReponse = response;
        id result = data;
        for (id plugin in plugins){
            if(plugin.respondsToSelector:(@selector(handleWithRequest:Reponse:data:error:))){
                if(!response && plugin.respondsToSelector:(@selector(cachedDataForRequest:))){
                    continue;
                }
                result = plugin.handleWithRequest:Reponse:data:error:(request,httpReponse,result,&error);
            }
        }
        completion(httpReponse,result,error);
    };
    for (id plugin in plugins){
        if(plugin.respondsToSelector:(@selector(cachedDataForRequest:))){
            id cahce = plugin.cachedDataForRequest:(request);
            completeHandler(cahce,nil,nil);
            return nil;
        }
    }
    typeof weakPlugins = plugins;
    Block resumeTask = ^NSURLSessionDataTask *{
        for (id plugin in weakPlugins){
            if(plugin.respondsToSelector:(@selector(willStart:))){
                plugin.willStart:(request);
            }
        }
        for (id plugin in weakPlugins){
            if(plugin.respondsToSelector:(@selector(testDataForRequest:completionHandler:))){
                plugin.testDataForRequest:completionHandler:(request,^void (NSData *data,NSError *error){
                    completeHandler(data,NSHTTPURLResponse.new(),error);
                });
                return nil;
            }
        }
        NSURLSessionDataTask *task = NSURLSession.sharedSession().dataTaskWithRequest:completionHandler:(request,completeHandler);
        task.resume();
        return task;
    };
    for (id plugin in plugins){
        if(plugin.respondsToSelector:(@selector(canRetry))){
            if(plugin.canRetry() && plugin.respondsToSelector:(@selector(setRetryClosure:))){
                plugin.setRetryClosure:(resumeTask);
            }
        }
    }
    return resumeTask();
}
}
