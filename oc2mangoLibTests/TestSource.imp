
#import "SFHTTPClient.h"
#import "SFHTTPPlugin.h"

@protocol HTTPPlugins <NSObject>

@end

@protocol SFPlugin <HTTPPlugins>
@required
@property (nonatomic, strong)id <SFPlugin> next;
@property (nonatomic, strong, readonly) id <SFPlugin> (^addNext)(id <SFPlugin> plugin);
@property (nonatomic, assign)BOOL canRetry;
@property (nonatomic, copy)NSURLSessionTask *(^retryClosure)(void);
@optional
- (id)cachedDataForRequest:(NSURLRequest *)reqest;
- (void)willStart:(NSURLRequest *)request;
- (id)handleWithRequest:(NSURLRequest *)request Reponse:(NSHTTPURLResponse *)response data:(id)data error:(NSError **)error;
- (void)testDataForRequest:(NSURLRequest *)request completionHandler:(void (^)(NSData *data, NSError *error))completionHandler;
@end


NSString *queryPramameters(NSDictionary *param){
    NSMutableArray *pairs = [NSMutableArray array];
    [param enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {
        [pairs addObject:[NSString stringWithFormat:@"%@=%@",key,obj]];
    }];
    return [pairs componentsJoinedByString:@"&"];
}

@interface SFHTTPClient : NSObject
@property (nonatomic,readonly) NSURL *baseUrl;
@end


@implementation SFHTTPClient{
    NSURL * _baseUrl;
}
- (instancetype)initWithBaseUrl:(NSURL *)baseUrl{
    self = [super init];
    self->_baseUrl = baseUrl;
    return self;
}
- (NSURLSessionDataTask *)requestWithMethod:(SFNHTTPMethod)method
                                        uri:(NSString *)URLString
                                 parameters:(NSDictionary *)param
                                    plugin:(id <SFPlugin>)plugin
                                 completion:(HTTPHandler)completion{
    
    NSMutableURLRequest *request = [self createRequestWithMethod:method uri:URLString parameters:param];
    return [self request:request plugin:plugin completion:completion];
}

- (NSMutableURLRequest *)createRequestWithMethod:(SFNHTTPMethod)method uri:(NSString *)uri parameters:(NSDictionary *)param{
    NSURL *url = [self.baseUrl URLByAppendingPathComponent:uri];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    request.timeoutInterval = 15;
    NSMutableDictionary *signedParam = [param mutableCopy];
    
    if (method == POST){
        request.HTTPMethod = @"POST";
        request.HTTPBody = [queryPramameters(signedParam) dataUsingEncoding:0];
    }else{
        request.HTTPMethod = @"GET";
    }
    return request;
}
- (NSMutableURLRequest *)createEncryptedRequestWithMethod:(SFNHTTPMethod)method uri:(NSString *)uri parameters:(NSDictionary *)param{
    NSURL *url = [self.baseUrl URLByAppendingPathComponent:uri];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    request.timeoutInterval = 15;
    [request setValue:@"application/json" forHTTPHeaderField:@"Content-OMType"];
    request.HTTPMethod = @"POST";
    NSData *originalData = [NSJSONSerialization dataWithJSONObject:param options:0 error:nil];
    NSString *jsonStr = [[NSString alloc] initWithData:originalData encoding:0];

    NSDictionary *container = [NSDictionary dictionary];
    request.HTTPBody = [NSJSONSerialization dataWithJSONObject:container options:0 error:nil];
    
    return request;
}

- (NSURLSessionDataTask *)request:(NSURLRequest *)request
                          plugin:(id <SFPlugin>)plugin
                       completion:(HTTPHandler)completion{
    NSMutableArray *plugins = [NSMutableArray array];
    while (plugin) {
        [plugins addObject:plugin];
        plugin = plugin.next;
    }
    
    void (^completeHandler)(NSData *data, NSURLResponse *response, NSError *error) = ^(NSData *data, NSURLResponse *response, NSError *error){
        NSHTTPURLResponse *httpReponse = (NSHTTPURLResponse *)response;
        id result = data;
        for (id <SFPlugin>plugin in plugins) {
            if ([plugin respondsToSelector:@selector(handleWithRequest:Reponse:data:error:)]) {
                // 如果是缓存、此时不调用缓存插件的保存方法
                if (!response && [plugin respondsToSelector:@selector(cachedDataForRequest:)]) {
                    continue;
                }
                result = [plugin handleWithRequest:request Reponse:httpReponse data:result error:&error];
            }
        }
        completion(httpReponse,result,error);
    };
    
    // check cache
    for (id <SFPlugin>plugin in plugins) {
        if ([plugin respondsToSelector:@selector(cachedDataForRequest:)]) {
            id cahce = [plugin cachedDataForRequest:request];
            completeHandler(cahce, nil, nil);
            return nil;
        }
    }
    typeof(plugins) weakPlugins  = plugins;
    NSURLSessionDataTask* (^resumeTask)(void) = ^NSURLSessionDataTask *(){
        for (id <SFPlugin>plugin in weakPlugins) {
            if ([plugin respondsToSelector:@selector(willStart:)]) {
                [plugin willStart:request];
            }
        }
        for (id <SFPlugin>plugin in weakPlugins){ // send test data before task resume
            if ([plugin respondsToSelector:@selector(testDataForRequest:completionHandler:)]) {
                [plugin testDataForRequest:request completionHandler:^(NSData *data, NSError *error) {
                    completeHandler(data, [NSHTTPURLResponse new],error);
                }];
                return nil;
            }
        }
        NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:completeHandler];
        [task resume];
        return task;
    };
    
    // set plugin's retry block
    for (id <SFPlugin>plugin in plugins) {
        if ([plugin respondsToSelector:@selector(canRetry)]) {
            if ([plugin canRetry] && [plugin respondsToSelector:@selector(setRetryClosure:)]) {
                [plugin setRetryClosure:resumeTask];
            }
        }
    }
    return resumeTask();
}
@end
